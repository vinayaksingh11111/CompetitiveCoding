{"title":"B. Permutation Sort","contestId":"1525","problemIndex":"B","timeLimit":"2 seconds","memLimit":"256 megabytes","inputFormat":"standard input","outputFormat":"standard output","problemHtml":"<p>You are given a permutation $$$a$$$ consisting of $$$n$$$ numbers $$$1$$$, $$$2$$$, ..., $$$n$$$ (a permutation is an array in which each element from $$$1$$$ to $$$n$$$ occurs exactly once).</p><p>You can perform the following operation: choose some subarray (contiguous subsegment) of $$$a$$$ and rearrange the elements in it in any way you want. But this operation cannot be applied to the whole array.</p><p>For example, if $$$a = [2, 1, 4, 5, 3]$$$ and we want to apply the operation to the subarray $$$a[2, 4]$$$ (the subarray containing all elements from the $$$2$$$-nd to the $$$4$$$-th), then after the operation, the array can become $$$a = [2, 5, 1, 4, 3]$$$ or, for example, $$$a = [2, 1, 5, 4, 3]$$$.</p><p>Your task is to calculate the minimum number of operations described above to sort the permutation $$$a$$$ in ascending order.</p>","inSpecsHtml":"<div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 2000$$$)&#xA0;&#x2014; the number of test cases.</p><p>The first line of the test case contains a single integer $$$n$$$ ($$$3 \\le n \\le 50$$$)&#xA0;&#x2014; the number of elements in the permutation.</p><p>The second line of the test case contains $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$&#xA0;&#x2014; the given permutation $$$a$$$.</p>","outSpecsHtml":"<div class=\"section-title\">Output</div><p>For each test case, output a single integer&#xA0;&#x2014; the minimum number of operations described above to sort the array $$$a$$$ in ascending order.</p>","noteHtml":"<div class=\"section-title\">Note</div><p>In the explanations, $$$a[i, j]$$$ defines the subarray of $$$a$$$ that starts from the $$$i$$$-th element and ends with the $$$j$$$-th element.</p><p>In the first test case of the example, you can select the subarray $$$a[2, 3]$$$ and swap the elements in it.</p><p>In the second test case of the example, the permutation is already sorted, so you don&apos;t need to apply any operations.</p><p>In the third test case of the example, you can select the subarray $$$a[3, 5]$$$ and reorder the elements in it so $$$a$$$ becomes $$$[2, 1, 3, 4, 5]$$$, and then select the subarray $$$a[1, 2]$$$ and swap the elements in it, so $$$a$$$ becomes $$$[1, 2, 3, 4, 5]$$$.</p>","sampleTestcases":[{"id":1621154091335,"input":"3\n4\n1 3 2 4\n3\n1 2 3\n5\n2 1 4 5 3\n","output":"1\n0\n2\n","result":{"id":1621154091335,"stdout":"1\r\n0\r\n2\r\n","stderr":"","exitcode":0,"signal":null,"time":43,"timeout":false}}],"submitUrl":"https://codeforces.com/contest/1525/submit","language":"c++","langId":"54"}