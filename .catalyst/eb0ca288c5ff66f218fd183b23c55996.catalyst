{"title":"B. Codeforces Subsequences","contestId":"1368","problemIndex":"B","timeLimit":"2 seconds","memLimit":"512 megabytes","inputFormat":"standard input","outputFormat":"standard output","problemHtml":"<p>Karl likes Codeforces and subsequences. He wants to find a string of lowercase English letters that contains at least $$$k$$$ subsequences <span class=\"tex-font-style-tt\">codeforces</span>. Out of all possible strings, Karl wants to find a shortest one.</p><p>Formally, a <span class=\"tex-font-style-tt\">codeforces</span> subsequence of a string $$$s$$$ is a subset of ten characters of $$$s$$$ that read <span class=\"tex-font-style-tt\">codeforces</span> from left to right. For example, <span class=\"tex-font-style-tt\">codeforces</span> contains <span class=\"tex-font-style-tt\">codeforces</span> a single time, while <span class=\"tex-font-style-tt\">codeforcesisawesome</span> contains <span class=\"tex-font-style-tt\">codeforces</span> four times: <span class=\"tex-font-style-tt\"><span class=\"tex-font-style-bf\">codeforces</span>isawesome</span>, <span class=\"tex-font-style-tt\"><span class=\"tex-font-style-bf\">codeforce</span>si<span class=\"tex-font-style-bf\">s</span>awesome</span>, <span class=\"tex-font-style-tt\"><span class=\"tex-font-style-bf\">codeforce</span>sisawe<span class=\"tex-font-style-bf\">s</span>ome</span>, <span class=\"tex-font-style-tt\"><span class=\"tex-font-style-bf\">codeforc</span>esisaw<span class=\"tex-font-style-bf\">es</span>ome</span>.</p><p>Help Karl find any shortest string that contains at least $$$k$$$ <span class=\"tex-font-style-tt\">codeforces</span> subsequences.</p>","inSpecsHtml":"<div class=\"section-title\">Input</div><p>The only line contains a single integer $$$k$$$ ($$$1 \\leq k \\leq 10^{16})$$$.</p>","outSpecsHtml":"<div class=\"section-title\">Output</div><p>Print a shortest string of lowercase English letters that contains at least $$$k$$$ <span class=\"tex-font-style-tt\">codeforces</span> subsequences. If there are several such strings, print any of them.</p>","noteHtml":null,"sampleTestcases":[{"id":1620438079772,"input":"1\n","output":"codeforces\n","result":{"id":1620438079772,"stdout":"codeforces\r\n","stderr":"","exitcode":0,"signal":null,"time":77,"timeout":false}},{"id":1620438079773,"input":"3\n","output":"codeforcesss","result":{"id":1620438079773,"stdout":"ccoodeforces\r\n","stderr":"","exitcode":0,"signal":null,"time":35,"timeout":false}}],"submitUrl":"https://codeforces.com/contest/1368/submit","language":"c++","langId":"54","editorial":"<div><p>Suppose that instead of <span class=\"tex-font-style-tt\">codeforces</span> subsequences we&apos;re looking for, say, <span class=\"tex-font-style-tt\">abcde</span> subsequences. Then in an optimal string all <span class=\"tex-font-style-tt\">a</span>&apos;s appear at the front. Indeed, moving any other occurence of <span class=\"tex-font-style-tt\">a</span> to the front will leave all the other occurences intact, and can only possibly create new ones. For a similar reason, all <span class=\"tex-font-style-tt\">b</span>&apos;s should immediately follow, then go all <span class=\"tex-font-style-tt\">c</span>&apos;s, and so on.</p><p>The only question is how many <span class=\"tex-font-style-tt\">a</span>&apos;s, <span class=\"tex-font-style-tt\">b</span>&apos;s, etc should we take. The answer is we should have quantities of each letter as close as possible to each other. Indeed, the number of subsequences is $$$n_a \\times n_b \\times \\ldots \\times n_e$$$, where $$$n_a, n_b, \\ldots$$$ are the number of occurences of each letter. If, say, $$$n_a - n_b &gt; 1$$$, then it is not hard to show that transforming an <span class=\"tex-font-style-tt\">a</span> to a <span class=\"tex-font-style-tt\">b</span> increases the product. Now the optimal distribution can be obtained simply by increasing $$$n_a, n_b, \\ldots $$$ one by one in a loop. We should stop once the product is at least $$$k$$$.</p><p>This approach will, however, not work quite as well if the subsequence has repeated letters. Still, it is natural to expect that the same pattern applies to optimal strings with <span class=\"tex-font-style-tt\">codeforces</span> subsequences: it has a lot of unique letters, and repeated letters are far apart. It was hardly necessary, but here&apos;s one way to prove that the pattern works <span class=\"tex-font-style-it\">(math and casework alert)</span>:</p><ul><li> Letters <span class=\"tex-font-style-tt\">d</span>, <span class=\"tex-font-style-tt\">f</span>, <span class=\"tex-font-style-tt\">r</span>, <span class=\"tex-font-style-tt\">s</span> should form consecutive blocks. If, say, two <span class=\"tex-font-style-tt\">d</span>&apos;s are separated by other letters, we can look which <span class=\"tex-font-style-tt\">d</span> is present in fewer number of subsequences, and more it next to the more popular one. The same argument works for all other letters.</li><li> It doesn&apos;t make sense to put anything other than <span class=\"tex-font-style-tt\">e</span>&apos;s between <span class=\"tex-font-style-tt\">d</span>&apos;s and <span class=\"tex-font-style-tt\">f</span>&apos;s. Indeed, any other letter won&apos;t be present in any subsequences. Similarly, there can only be <span class=\"tex-font-style-tt\">o</span>&apos;s between <span class=\"tex-font-style-tt\">f</span>&apos;s and <span class=\"tex-font-style-tt\">r</span>&apos;s. Now we know the string looks like <span class=\"tex-font-style-tt\">???dddeeefffooorrr???sss</span>.</li><li> Finally, only <span class=\"tex-font-style-tt\">c</span>&apos;s and <span class=\"tex-font-style-tt\">o</span>&apos;s can precede <span class=\"tex-font-style-tt\">d</span>&apos;s, and it doesn&apos;t make sense to place <span class=\"tex-font-style-tt\">o</span>&apos;s before <span class=\"tex-font-style-tt\">c</span>&apos;s. Similarly, <span class=\"tex-font-style-tt\">c</span>&apos;s and <span class=\"tex-font-style-tt\">e</span>&apos;s in this order occupy the space between <span class=\"tex-font-style-tt\">r</span>&apos;s and <span class=\"tex-font-style-tt\">s</span>&apos;s.</li></ul><p>It follows that the same solution as above can be applied to solve this problem.</p></div>"}