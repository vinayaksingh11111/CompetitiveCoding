{"title":"C. Move Brackets","contestId":"1374","problemIndex":"C","timeLimit":"1 second","memLimit":"256 megabytes","inputFormat":"standard input","outputFormat":"standard output","problemHtml":"<p>You are given a bracket sequence $$$s$$$ of length $$$n$$$, where $$$n$$$ is even (divisible by two). The string $$$s$$$ consists of $$$\\frac{n}{2}$$$ opening brackets &apos;<span class=\"tex-font-style-tt\">(</span>&apos; and $$$\\frac{n}{2}$$$ closing brackets &apos;<span class=\"tex-font-style-tt\">)</span>&apos;.</p><p>In one move, you can choose <span class=\"tex-font-style-bf\">exactly one bracket</span> and move it to the beginning of the string or to the end of the string (i.e. you choose some index $$$i$$$, remove the $$$i$$$-th character of $$$s$$$ and insert it before or after all remaining characters of $$$s$$$).</p><p>Your task is to find the minimum number of moves required to obtain <span class=\"tex-font-style-bf\">regular bracket sequence</span> from $$$s$$$. It can be proved that the answer always exists under the given constraints.</p><p>Recall what the regular bracket sequence is:</p><ul> <li> &quot;<span class=\"tex-font-style-tt\">()</span>&quot; is regular bracket sequence; </li><li> if $$$s$$$ is regular bracket sequence then &quot;<span class=\"tex-font-style-tt\">(</span>&quot; + $$$s$$$ + &quot;<span class=\"tex-font-style-tt\">)</span>&quot; is regular bracket sequence; </li><li> if $$$s$$$ and $$$t$$$ are regular bracket sequences then $$$s$$$ + $$$t$$$ is regular bracket sequence. </li></ul><p>For example, &quot;<span class=\"tex-font-style-tt\">()()</span>&quot;, &quot;<span class=\"tex-font-style-tt\">(())()</span>&quot;, &quot;<span class=\"tex-font-style-tt\">(())</span>&quot; and &quot;<span class=\"tex-font-style-tt\">()</span>&quot; are regular bracket sequences, but &quot;<span class=\"tex-font-style-tt\">)(</span>&quot;, &quot;<span class=\"tex-font-style-tt\">()(</span>&quot; and &quot;<span class=\"tex-font-style-tt\">)))</span>&quot; are not.</p><p>You have to answer $$$t$$$ independent test cases.</p>","inSpecsHtml":"<div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 2000$$$) &#x2014; the number of test cases. Then $$$t$$$ test cases follow.</p><p>The first line of the test case contains one integer $$$n$$$ ($$$2 \\le n \\le 50$$$) &#x2014; the length of $$$s$$$. It is guaranteed that $$$n$$$ is even. The second line of the test case containg the string $$$s$$$ consisting of $$$\\frac{n}{2}$$$ opening and $$$\\frac{n}{2}$$$ closing brackets.</p>","outSpecsHtml":"<div class=\"section-title\">Output</div><p>For each test case, print the answer &#x2014; the minimum number of moves required to obtain <span class=\"tex-font-style-bf\">regular bracket sequence</span> from $$$s$$$. It can be proved that the answer always exists under the given constraints.</p>","noteHtml":"<div class=\"section-title\">Note</div><p>In the first test case of the example, it is sufficient to move the first bracket to the end of the string.</p><p>In the third test case of the example, it is sufficient to move the last bracket to the beginning of the string.</p><p>In the fourth test case of the example, we can choose last three openning brackets, move them to the beginning of the string and obtain &quot;<span class=\"tex-font-style-tt\">((()))(())</span>&quot;.</p>","sampleTestcases":[{"id":1619263635517,"input":"4\n2\n)(\n4\n()()\n8\n())()()(\n10\n)))((((())","output":"1\n0\n1\n3\n","result":{"id":1619263635517,"stdout":"1\r\n0\r\n1\r\n3\r\n","stderr":"","exitcode":0,"signal":null,"time":32,"timeout":false}},{"id":1619982516698,"input":"2\n8\r\n())()()(\r\n10\r\n)))((((())","output":"1\n3\n","result":{"id":1619982516698,"stdout":"1\r\n3\r\n","stderr":"","exitcode":0,"signal":null,"time":34,"timeout":false}}],"submitUrl":"https://codeforces.com/problemset/submit","language":"c++","langId":"54"}