{"title":"B1. Palindrome Game (easy version)","contestId":"1527","problemIndex":"B1","timeLimit":"1 second","memLimit":"256 megabytes","inputFormat":"standard input","outputFormat":"standard output","problemHtml":"<p><span class=\"tex-font-style-bf\">The only difference between the easy and hard versions is that the given string $$$s$$$ in the easy version is initially a palindrome, this condition is not always true for the hard version.</span></p><p>A palindrome is a string that reads the same left to right and right to left. For example, &quot;<span class=\"tex-font-style-tt\">101101</span>&quot; is a palindrome, while &quot;<span class=\"tex-font-style-tt\">0101</span>&quot; is not.</p><p>Alice and Bob are playing a game on a string $$$s$$$ <span class=\"tex-font-style-bf\">(which is initially a palindrome in this version)</span> of length $$$n$$$ consisting of the characters &apos;<span class=\"tex-font-style-tt\">0</span>&apos; and &apos;<span class=\"tex-font-style-tt\">1</span>&apos;. Both players take alternate turns with Alice going first.</p><p>In each turn, the player can perform one of the following operations: </p><ol> <li> Choose any $$$i$$$ ($$$1 \\le i \\le n$$$), where $$$s[i] =$$$ &apos;<span class=\"tex-font-style-tt\">0</span>&apos; and change $$$s[i]$$$ to &apos;<span class=\"tex-font-style-tt\">1</span>&apos;. Pay 1 dollar. </li><li> Reverse the whole string, pay 0 dollars. This operation is only allowed if the string is currently <span class=\"tex-font-style-bf\">not</span> a palindrome, and the last operation was not reverse. That is, if Alice reverses the string, then Bob can&apos;t reverse in the next move, and vice versa. </li></ol><p>Reversing a string means reordering its letters from the last to the first. For example, &quot;<span class=\"tex-font-style-tt\">01001</span>&quot; becomes &quot;<span class=\"tex-font-style-tt\">10010</span>&quot; after reversing.</p><p>The game ends when every character of string becomes &apos;<span class=\"tex-font-style-tt\">1</span>&apos;. The player who spends minimum dollars till this point wins the game and it is a draw if both spend equal dollars. If both players play optimally, output whether Alice wins, Bob wins, or if it is a draw.</p>","inSpecsHtml":"<div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^3$$$). Then $$$t$$$ test cases follow.</p><p>The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^3$$$).</p><p>The second line of each test case contains the string $$$s$$$ of length $$$n$$$, consisting of the characters &apos;<span class=\"tex-font-style-tt\">0</span>&apos; and &apos;<span class=\"tex-font-style-tt\">1</span>&apos;. It is guaranteed that the string $$$s$$$ is a palindrome and contains at least one &apos;<span class=\"tex-font-style-tt\">0</span>&apos;. </p><p>Note that there is no limit on the sum of $$$n$$$ over test cases.</p>","outSpecsHtml":"<div class=\"section-title\">Output</div><p>For each test case print a single word in a new line: </p><ul> <li> &quot;<span class=\"tex-font-style-tt\">ALICE</span>&quot;, if Alice will win the game, </li><li> &quot;<span class=\"tex-font-style-tt\">BOB</span>&quot;, if Bob will win the game, </li><li> &quot;<span class=\"tex-font-style-tt\">DRAW</span>&quot;, if the game ends in a draw. </li></ul>","noteHtml":"<div class=\"section-title\">Note</div><p>In the first test case of the example, </p><ul> <li> in the $$$1$$$-st move Alice has to perform the $$$1$$$-st operation, since the string is currently a palindrome. </li><li> in the $$$2$$$-nd move Bob reverses the string. </li><li> in the $$$3$$$-rd move Alice again has to perform the $$$1$$$-st operation. All characters of the string are &apos;<span class=\"tex-font-style-tt\">1</span>&apos;, game over. </li></ul> Alice spends $$$2$$$ dollars while Bob spends $$$0$$$ dollars. Hence, Bob always wins.","sampleTestcases":[{"id":1621526966061,"input":"2\n4\n1001\n1\n0\n","output":"BOB\nBOB\n","result":{"id":1621526966061,"stdout":"BOB\r\nBOB\r\n","stderr":"","exitcode":0,"signal":null,"time":33,"timeout":false}},{"id":1621527381310,"input":"3\r\n3\r\n110\r\n2\r\n00\r\n4\r\n1010","output":"BOB\r\nBOB\r\nBOB","result":{"id":1621527381310,"stdout":"BOB\r\nBOB\r\nBOB\r\n","stderr":"","exitcode":0,"signal":null,"time":32,"timeout":false}}],"submitUrl":"https://codeforces.com/contest/1527/submit","language":"c++","langId":"54"}